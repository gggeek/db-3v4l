{% extends 'base.html.twig' %}

{% block page_title %}{% endblock %}

{% block page_content %}
    {% embed '@AdminLTE/Widgets/box-widget.html.twig' %}
        {% block box_title %}
            Welcome to the most promiscuous command-line SQL shell
        {% endblock %}
        {% block box_body %}
            {% apply markdown_to_html %}
            DB-3v4l.org (leetspeak for database-eval) is a command-line tool that allows you to run SQL code on multiple database servers.

            There are currently 19 server instances for you to test your queries on.

            For every query you submit, this tool gives you back:
            - Output (the selected data)
            - Performance (time and memory) of execution

            ### Usage

            Example: executing the sql snippet `select current_date` in parallel on all databases:

            ```
            cd docker && docker-compose up -d
            docker exec -ti db3v4l_worker su - db3v4l

                php bin/dbconsole sql:execute --sql='select current_date'

            exit
            docker-compose stop
            ```

            If you have a bigger set of SQL commands to execute than it is practical to put in a command-line, you can save them
            to a file and then execute it in parallel on all databases:

            `php bin/dbconsole sql:execute --file=./shared/my_huge_script.sql`

            *NB* to share files between the host computer and the container, put them in the `shared` folder.

            *NB* you can also execute different sql commands based on database type by saving them to separate files. The `sql:execute`
            command does replace some tokens in the values of the `--file` option. Eg:

            `php bin/dbconsole sql:execute --file='./shared/test_{dbtype}.sql'`

            will look for files `test_mariadb.sql`, `test_mssql.sql`, `test_mysql.sql`, `test_postgresql.sql`, `test_sqlite.sql`

            From within the worker container, you can also list all available database instances:

            `php bin/dbconsole instance:list`

            As well as test connecting to them using the standard clients:

            ```
            mysql -h mysql_5_5 -u 3v4l -p -e 'select current_date'
            psql -h postgresql_9_4 -U postgres -c 'select current_date'
            sqlcmd -S mssqlserver_2019_ga -U sa -Q "select GETDATE() as 'current_date'"
            sqlite3 /home/db3v4l/data/sqlite/3.27/3v4l.sqlite 'select current_date'
            ```

            The default password for those commands is '3v4l' for all databases except ms sql server, for which it is 3v4l3V4L.

            Once the containers are up and running, you can access a database administration console at: http://localhost/adminer.php
            (if you are running the whole stack inside a VM, replace 'localhost' with the IP of the VM, as seen from the computer where
            your browser is executing).

            Last but not least, you have access to other command-line tools which can be useful in troubleshooting SQL queries:

                ./vendor/bin/highlight-query
                ./vendor/bin/lint-query
                ./vendor/bin/tokenize-query

            ## Details

            ### Troubleshooting

            After starting the containers via `docker-compose up -d`, you can:

            - check if they are all running: `docker-compose ps`
            - check if they all bootstrapped correctly: `docker-compose logs`
            - check if one container bootstrapped correctly, eg: `docker-compose logs db3v4l_postgresql_9_4`
            - check the processes running in one container, eg: `docker exec -ti db3v4l_postgresql_9_4 ps aux`

            ### Maintenance

            - 3 scripts are provided in the top-level `bin` folder to help keeping disk space usage under control

            ## FAQ

            - Q: can I customize the configuration of the databases? A: Yes, there is one config file for each db that you can edit,
            in docker/config. If you change them, you need to restart the docker containers for the settings to take effect, but
            there is no need to rebuild them

            - Q: can I make the db3v4l application use an existing database available in my infrastructure besides the self-contained ones?
            A: yes, as long as the type of database is already supported by the application.
            In order to add a new database, it is enough to:
            - edit `app/config/services.yml` and add the definition of the extra remote database in key `db3v4l.database_instances`
            - test that the worker container can connect to the remote database on the desired port (besides firewalls, the
            dns resolution might be problematic. If in doubt, test first using IP addresses)

            - Q: can I access the db3v4l databases from other applications running outside the provided Docker containers? I want
            to do mass data import / export from them.
            A: it is possible, but not enabled by default. In order to allow it, stop the Docker Compose stack, edit the
            `docker-compose.yml` file, set port mapping for any database that you want to expose to the 'outside world' and restart
            the stack.
            *Note* that some of the databases included in the db3v4l, such as Microsoft SQL Server, have licensing conditions
            which restrict what you are legally allowed to use them for. We assume no responsibility for any abuse of such conditions.
            *Note also* that there has be no hardening or tuning done of the containers running the database - the database root
            account password is not even randomized... Opening them up for access from external tools might result in
            security-related issues

            - Q: what is the level of security offered by this tool? Can I allow untrusted users use it to run _any_ query they want?
            A: this is the end goal, but at the moment there is close to zero security enforced. Please only allow trusted developers
            to access the platform and run queries on it

            - Q: does the platform store/log anywhere the executed SQL commands? A: no. But those might be stored in the databases log
            files, which are stored on disk. So it's not a good idea to copy-paste sql snippets which contain sensitive information
            such as passwords
            {% endapply %}
        {% endblock %}
    {% endembed %}
{% endblock %}
