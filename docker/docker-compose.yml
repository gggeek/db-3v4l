version: '3'

networks:
    default:
        ipam:
            config:
                - subnet: "${COMPOSE_SUBNET}.0/24"

services:

    adminer:
        build:
            context: images/adminer
            args:
                debian_mirror: "${COMPOSE_DEBIAN_MIRROR}"
                timezone: "${COMPOSE_TZ}"
                do_update_os: "${COMPOSE_DO_UPDATE_OS}"
                do_shrink_container: "${COMPOSE_DO_SHRINK_CONTAINERS}"
        hostname: adminer
        container_name: "${COMPOSE_PROJECT_NAME}_adminer"
        # No ports exposed by default: we use the 'web' container as reverse proxy
        #ports:
        #    - "${COMPOSE_WEB_LISTEN_ADDR}:${COMPOSE_WEB_LISTEN_PORT_HTTP}:80"
        #    - "${COMPOSE_WEB_LISTEN_ADDR}:${COMPOSE_WEB_LISTEN_PORT_HTTPS}:443"
        volumes:
            - ../adminer:/var/www/db3v4l
            - ./logs/adminer/nginx:/var/log/nginx
            - ./logs/adminer/php:/var/log/php
        environment:
            - CONTAINER_USER_UID
            - CONTAINER_USER_GID
            - COMPOSE_SETUP_APP_ON_BOOT

    lazydocker:
        build:
            context: images/lazydocker
            args:
                debian_mirror: "${COMPOSE_DEBIAN_MIRROR}"
                timezone: "${COMPOSE_TZ}"
                do_update_os: "${COMPOSE_DO_UPDATE_OS}"
                do_shrink_container: "${COMPOSE_DO_SHRINK_CONTAINERS}"
        hostname: lazydocker
        container_name: "${COMPOSE_PROJECT_NAME}_lazydocker"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            # @todo could we get away with mounting something that does not include data and logs?
            #       Maybe it would be enough to copy the composer files into the container ?
            - ./:/var/db3v4l

    redis:
        build:
            context: images/redis
            args:
                debian_mirror: "${COMPOSE_DEBIAN_MIRROR}"
                timezone: "${COMPOSE_TZ}"
                do_update_os: "${COMPOSE_DO_UPDATE_OS}"
                do_shrink_container: "${COMPOSE_DO_SHRINK_CONTAINERS}"
        hostname: redis
        container_name: "${COMPOSE_PROJECT_NAME}_redis"
        volumes:
            - ./data/redis:/var/redis
            - ./logs/redis:/var/log/redis

    web:
        build:
            context: images/web
            args:
                debian_mirror: "${COMPOSE_DEBIAN_MIRROR}"
                timezone: "${COMPOSE_TZ}"
                do_update_os: "${COMPOSE_DO_UPDATE_OS}"
                do_shrink_container: "${COMPOSE_DO_SHRINK_CONTAINERS}"
        hostname: web
        container_name: "${COMPOSE_PROJECT_NAME}_web"
        ports:
            - "${COMPOSE_WEB_LISTEN_ADDR}:${COMPOSE_WEB_LISTEN_PORT_HTTP}:80"
            - "${COMPOSE_WEB_LISTEN_ADDR}:${COMPOSE_WEB_LISTEN_PORT_HTTPS}:443"
        volumes:
            - ../app:/var/www/db3v4l
            - ../doc:/var/www/doc
            - ./logs/web/nginx:/var/log/nginx
            - ./logs/web/php:/var/log/php
        environment:
            - CONTAINER_USER_UID
            - CONTAINER_USER_GID
            - APP_ENV
            - APP_DEBUG

    worker:
        build:
            context: images/worker
            args:
                debian_mirror: "${COMPOSE_DEBIAN_MIRROR}"
                timezone: "${COMPOSE_TZ}"
                do_update_os: "${COMPOSE_DO_UPDATE_OS}"
                do_shrink_container: "${COMPOSE_DO_SHRINK_CONTAINERS}"
                container_user: "${CONTAINER_USER}"
        hostname: worker
        container_name: "${COMPOSE_PROJECT_NAME}_worker"
        volumes:
            - "../app:/home/${CONTAINER_USER}/app"
            - "../doc:/home/${CONTAINER_USER}/doc"
            - "../shared:/home/${CONTAINER_USER}/shared"
            - "./data/composer_cache/:/home/${CONTAINER_USER}/.composer"
            - "./data/sqlite/:/home/${CONTAINER_USER}/data/sqlite"
        environment:
            - CONTAINER_USER
            - CONTAINER_USER_UID
            - CONTAINER_USER_GID
            - APP_ENV
            - APP_DEBUG
            - COMPOSE_SETUP_APP_ON_BOOT

### Database containers are defined in the `compose` directory, in one yml file per vendor
