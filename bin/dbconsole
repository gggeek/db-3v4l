#!/usr/bin/env bash

# Shortcut to run the dbconsole command in the Worker Container from the Host

# consts
COMPOSE_DEFAULT_ENV_FILE=.env
WORKER_SERVICE=worker
# vars
COMPOSE_LOCAL_ENV_FILE=${COMPOSE_LOCAL_ENV_FILE:-.env.local}
WORKER_CONTAINER=
WORKER_USER=

check_requirements() {
    which docker >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        printf "\n\e[31mPlease install docker & add it to \$PATH\e[0m\n\n" >&2
        exit 1
    fi
}

load_config() {
    source ${COMPOSE_DEFAULT_ENV_FILE}

    if [ -f "${COMPOSE_LOCAL_ENV_FILE}" ]; then
        # these vars we have to export as otherwise they are not taken into account by docker-compose
        set -a
        source "${COMPOSE_LOCAL_ENV_FILE}"
        set +a
    fi

    # @todo run `docker-compose ps` to retrieve the WORKER_CONTAINER id instead of parsing the config
    if [ -z "${COMPOSE_PROJECT_NAME}" ]; then
        printf "\n\e[31mCan not find the name of the composer project name in ${COMPOSE_DEFAULT_ENV_FILE} / ${COMPOSE_LOCAL_ENV_FILE}\e[0m\n\n" >&2
        exit 1
    fi
    # @todo the value for WORKER_USER could be hardcoded instead of being variable...
    if [ -z "${CONTAINER_USER}" ]; then
        printf "\n\e[31mCan not find the name of the container user account in ${COMPOSE_DEFAULT_ENV_FILE} / ${COMPOSE_LOCAL_ENV_FILE}\e[0m\n\n" >&2
        exit 1
    fi

    WORKER_CONTAINER="${COMPOSE_PROJECT_NAME}_${WORKER_SERVICE}"
    WORKER_USER=${CONTAINER_USER}
}

### Begin live code

check_requirements

cd "$(dirname -- ${BASH_SOURCE[0]})/../docker"

load_config

# @todo check that stack has been built, and that worker bootstrap is done

docker exec -ti "${WORKER_CONTAINER}" su - "${WORKER_USER}" -c '"$0" "$@"' -- "/usr/bin/php" "app/bin/dbconsole" "$@"
